node {
  name: "weights_and_biases/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal/RandomStandardNormal"
  input: "weights_and_biases/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal"
  op: "Add"
  input: "weights_and_biases/random_normal/mul"
  input: "weights_and_biases/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/insertion_weight"
  input: "weights_and_biases/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/read"
  op: "Identity"
  input: "weights_and_biases/insertion_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal_1/RandomStandardNormal"
  input: "weights_and_biases/random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal_1"
  op: "Add"
  input: "weights_and_biases/random_normal_1/mul"
  input: "weights_and_biases/random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/Input_Forget_weight"
  input: "weights_and_biases/random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/read"
  op: "Identity"
  input: "weights_and_biases/Input_Forget_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal_2/RandomStandardNormal"
  input: "weights_and_biases/random_normal_2/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal_2"
  op: "Add"
  input: "weights_and_biases/random_normal_2/mul"
  input: "weights_and_biases/random_normal_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/Suggestion_weight"
  input: "weights_and_biases/random_normal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/read"
  op: "Identity"
  input: "weights_and_biases/Suggestion_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\030\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "weights_and_biases/random_normal_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3/mul"
  op: "Mul"
  input: "weights_and_biases/random_normal_3/RandomStandardNormal"
  input: "weights_and_biases/random_normal_3/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/random_normal_3"
  op: "Add"
  input: "weights_and_biases/random_normal_3/mul"
  input: "weights_and_biases/random_normal_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "weights_and_biases/random_normal_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_weight"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/insertion_bias"
  input: "weights_and_biases/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/read"
  op: "Identity"
  input: "weights_and_biases/insertion_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/input_forget_bias"
  input: "weights_and_biases/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/read"
  op: "Identity"
  input: "weights_and_biases/input_forget_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/suggestion_bias"
  input: "weights_and_biases/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/read"
  op: "Identity"
  input: "weights_and_biases/suggestion_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "weights_and_biases/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
}
node {
  name: "placeholders/label"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "placeholders/initial_states"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "placeholders/input_data"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 17
        }
        dim {
          size: 1
        }
        dim {
          size: 21
        }
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArray"
  op: "TensorArrayV3"
  input: "forward_roll/scan/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\021\000\000\000\001\000\000\000\025\000\000\000"
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "forward_roll/scan/TensorArrayUnstack/Shape"
  input: "forward_roll/scan/TensorArrayUnstack/strided_slice/stack"
  input: "forward_roll/scan/TensorArrayUnstack/strided_slice/stack_1"
  input: "forward_roll/scan/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/range"
  op: "Range"
  input: "forward_roll/scan/TensorArrayUnstack/range/start"
  input: "forward_roll/scan/TensorArrayUnstack/strided_slice"
  input: "forward_roll/scan/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "forward_roll/scan/TensorArray"
  input: "forward_roll/scan/TensorArrayUnstack/range"
  input: "placeholders/input_data"
  input: "forward_roll/scan/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@placeholders/input_data"
      }
    }
  }
}
node {
  name: "forward_roll/scan/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArray_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArray_1"
  op: "TensorArrayV3"
  input: "forward_roll/scan/TensorArray_1/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "forward_roll/scan/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/Enter"
  op: "Enter"
  input: "forward_roll/scan/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/Enter_1"
  op: "Enter"
  input: "forward_roll/scan/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/Enter_2"
  op: "Enter"
  input: "placeholders/initial_states"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/Enter_3"
  op: "Enter"
  input: "forward_roll/scan/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/Merge"
  op: "Merge"
  input: "forward_roll/scan/while/Enter"
  input: "forward_roll/scan/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/Merge_1"
  op: "Merge"
  input: "forward_roll/scan/while/Enter_1"
  input: "forward_roll/scan/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/Merge_2"
  op: "Merge"
  input: "forward_roll/scan/while/Enter_2"
  input: "forward_roll/scan/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/Merge_3"
  op: "Merge"
  input: "forward_roll/scan/while/Enter_3"
  input: "forward_roll/scan/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/Less"
  op: "Less"
  input: "forward_roll/scan/while/Merge"
  input: "forward_roll/scan/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/Less/Enter"
  op: "Enter"
  input: "forward_roll/scan/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/Less_1/y"
  op: "Const"
  input: "^forward_roll/scan/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/Less_1"
  op: "Less"
  input: "forward_roll/scan/while/Merge_1"
  input: "forward_roll/scan/while/Less_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/LogicalAnd"
  op: "LogicalAnd"
  input: "forward_roll/scan/while/Less"
  input: "forward_roll/scan/while/Less_1"
}
node {
  name: "forward_roll/scan/while/LoopCond"
  op: "LoopCond"
  input: "forward_roll/scan/while/LogicalAnd"
}
node {
  name: "forward_roll/scan/while/Switch"
  op: "Switch"
  input: "forward_roll/scan/while/Merge"
  input: "forward_roll/scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Merge"
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/Switch_1"
  op: "Switch"
  input: "forward_roll/scan/while/Merge_1"
  input: "forward_roll/scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Merge_1"
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/Switch_2"
  op: "Switch"
  input: "forward_roll/scan/while/Merge_2"
  input: "forward_roll/scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Merge_2"
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/Switch_3"
  op: "Switch"
  input: "forward_roll/scan/while/Merge_3"
  input: "forward_roll/scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Merge_3"
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/Identity"
  op: "Identity"
  input: "forward_roll/scan/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/Identity_1"
  op: "Identity"
  input: "forward_roll/scan/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/Identity_2"
  op: "Identity"
  input: "forward_roll/scan/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/Identity_3"
  op: "Identity"
  input: "forward_roll/scan/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/add/y"
  op: "Const"
  input: "^forward_roll/scan/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/add"
  op: "Add"
  input: "forward_roll/scan/while/Identity"
  input: "forward_roll/scan/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "forward_roll/scan/while/TensorArrayReadV3/Enter"
  input: "forward_roll/scan/while/Identity_1"
  input: "forward_roll/scan/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "forward_roll/scan/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "forward_roll/scan/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat/axis"
  op: "Const"
  input: "^forward_roll/scan/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat"
  op: "ConcatV2"
  input: "forward_roll/scan/while/TensorArrayReadV3"
  input: "forward_roll/scan/while/Identity_2"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert"
  op: "MatMul"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter"
  op: "Enter"
  input: "weights_and_biases/insertion_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert"
  op: "Add"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter"
  op: "Enter"
  input: "weights_and_biases/insertion_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF"
  op: "MatMul"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter"
  op: "Enter"
  input: "weights_and_biases/Input_Forget_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF"
  op: "Add"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter"
  op: "Enter"
  input: "weights_and_biases/input_forget_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate"
  op: "Sigmoid"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_gate/sigmoid_IF"
  op: "Sigmoid"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_gate/scalar"
  op: "Const"
  input: "^forward_roll/scan/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_gate/mul"
  op: "Mul"
  input: "forward_roll/scan/while/To_suggestion_gate/scalar"
  input: "forward_roll/scan/while/To_suggestion_gate/sigmoid_IF"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_gate/ones"
  op: "Const"
  input: "^forward_roll/scan/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_gate/making_input_gate"
  op: "Add"
  input: "forward_roll/scan/while/To_suggestion_gate/ones"
  input: "forward_roll/scan/while/To_suggestion_gate/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making"
  op: "Mul"
  input: "forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate"
  input: "forward_roll/scan/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail/axis"
  op: "Const"
  input: "^forward_roll/scan/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail"
  op: "ConcatV2"
  input: "forward_roll/scan/while/TensorArrayReadV3"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion"
  op: "MatMul"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter"
  op: "Enter"
  input: "weights_and_biases/Suggestion_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion"
  op: "Add"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter"
  op: "Enter"
  input: "weights_and_biases/suggestion_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion"
  op: "Tanh"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_end/to_suggestion_node"
  op: "Mul"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion"
  input: "forward_roll/scan/while/To_suggestion_gate/making_input_gate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_end/forget_gating"
  op: "Mul"
  input: "forward_roll/scan/while/To_suggestion_gate/sigmoid_IF"
  input: "forward_roll/scan/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/To_end/suggestion_adding"
  op: "Add"
  input: "forward_roll/scan/while/To_end/forget_gating"
  input: "forward_roll/scan/while/To_end/to_suggestion_node"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "forward_roll/scan/while/Identity_1"
  input: "forward_roll/scan/while/To_end/suggestion_adding"
  input: "forward_roll/scan/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_end/suggestion_adding"
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "forward_roll/scan/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_end/suggestion_adding"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "forward_roll/scan/while/add_1/y"
  op: "Const"
  input: "^forward_roll/scan/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/while/add_1"
  op: "Add"
  input: "forward_roll/scan/while/Identity_1"
  input: "forward_roll/scan/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/NextIteration"
  op: "NextIteration"
  input: "forward_roll/scan/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/NextIteration_1"
  op: "NextIteration"
  input: "forward_roll/scan/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/NextIteration_2"
  op: "NextIteration"
  input: "forward_roll/scan/while/To_end/suggestion_adding"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/NextIteration_3"
  op: "NextIteration"
  input: "forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/Exit"
  op: "Exit"
  input: "forward_roll/scan/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/Exit_1"
  op: "Exit"
  input: "forward_roll/scan/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "forward_roll/scan/while/Exit_2"
  op: "Exit"
  input: "forward_roll/scan/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/while/Exit_3"
  op: "Exit"
  input: "forward_roll/scan/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "forward_roll/scan/TensorArray_1"
  input: "forward_roll/scan/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/TensorArray_1"
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayStack/range"
  op: "Range"
  input: "forward_roll/scan/TensorArrayStack/range/start"
  input: "forward_roll/scan/TensorArrayStack/TensorArraySizeV3"
  input: "forward_roll/scan/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/TensorArray_1"
      }
    }
  }
}
node {
  name: "forward_roll/scan/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "forward_roll/scan/TensorArray_1"
  input: "forward_roll/scan/TensorArrayStack/range"
  input: "forward_roll/scan/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "forward_roll/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "forward_roll/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "forward_roll/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/strided_slice"
  op: "StridedSlice"
  input: "forward_roll/scan/TensorArrayStack/TensorArrayGatherV3"
  input: "forward_roll/strided_slice/stack"
  input: "forward_roll/strided_slice/stack_1"
  input: "forward_roll/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "forward_roll/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "forward_roll/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "forward_roll/strided_slice_1"
  op: "StridedSlice"
  input: "forward_roll/scan/TensorArrayStack/TensorArrayGatherV3"
  input: "forward_roll/strided_slice_1/stack"
  input: "forward_roll/strided_slice_1/stack_1"
  input: "forward_roll/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "forward_roll/pass_back_state/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "forward_roll/pass_back_state"
  op: "Add"
  input: "forward_roll/pass_back_state/x"
  input: "forward_roll/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "prediction/WHTO_w_m"
  op: "MatMul"
  input: "forward_roll/strided_slice"
  input: "weights_and_biases/outwards_propagating_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "prediction/BHTO_b_a"
  op: "Add"
  input: "prediction/WHTO_w_m"
  input: "weights_and_biases/outwards_propagating_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "prediction/output"
  op: "Relu"
  input: "prediction/BHTO_b_a"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Sub"
  op: "Sub"
  input: "prediction/output"
  input: "placeholders/label"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Square"
  op: "Square"
  input: "loss/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/loss/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/loss"
  op: "Reshape"
  input: "loss/Square"
  input: "loss/loss/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/Fill"
  op: "Fill"
  input: "optimizer/gradients/Shape"
  input: "optimizer/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer/gradients/f_count_1"
  op: "Enter"
  input: "optimizer/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/Merge"
  op: "Merge"
  input: "optimizer/gradients/f_count_1"
  input: "optimizer/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/Switch"
  op: "Switch"
  input: "optimizer/gradients/Merge"
  input: "forward_roll/scan/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/Add/y"
  op: "Const"
  input: "^forward_roll/scan/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/Add"
  op: "Add"
  input: "optimizer/gradients/Switch:1"
  input: "optimizer/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/Add"
  input: "^optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPushV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPushV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/StackPushV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPushV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPushV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/StackPushV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/f_count_2"
  op: "Exit"
  input: "optimizer/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/b_count_1"
  op: "Enter"
  input: "optimizer/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/Merge_1"
  op: "Merge"
  input: "optimizer/gradients/b_count_1"
  input: "optimizer/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "optimizer/gradients/Merge_1"
  input: "optimizer/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "optimizer/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/b_count_2"
  op: "LoopCond"
  input: "optimizer/gradients/GreaterEqual"
}
node {
  name: "optimizer/gradients/Switch_1"
  op: "Switch"
  input: "optimizer/gradients/Merge_1"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/Sub"
  op: "Sub"
  input: "optimizer/gradients/Switch_1:1"
  input: "optimizer/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/NextIteration_1"
  op: "NextIteration"
  input: "optimizer/gradients/Sub"
  input: "^optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/b_count_3"
  op: "Exit"
  input: "optimizer/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/Fill"
  input: "optimizer/gradients/loss/loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/Square_grad/Const"
  op: "Const"
  input: "^optimizer/gradients/loss/loss_grad/Reshape"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/Square_grad/Mul"
  op: "Mul"
  input: "loss/Sub"
  input: "optimizer/gradients/loss/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/Square_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/loss/loss_grad/Reshape"
  input: "optimizer/gradients/loss/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sub_grad/Neg"
  op: "Neg"
  input: "optimizer/gradients/loss/Square_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/loss/Square_grad/Mul_1"
  input: "^optimizer/gradients/loss/Sub_grad/Neg"
}
node {
  name: "optimizer/gradients/loss/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/loss/Square_grad/Mul_1"
  input: "^optimizer/gradients/loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/loss/Square_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/loss/Sub_grad/Neg"
  input: "^optimizer/gradients/loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/loss/Sub_grad/Neg"
      }
    }
  }
}
node {
  name: "optimizer/gradients/prediction/output_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/loss/Sub_grad/tuple/control_dependency"
  input: "prediction/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/prediction/BHTO_b_a_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/prediction/output_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/prediction/BHTO_b_a_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/prediction/output_grad/ReluGrad"
  input: "^optimizer/gradients/prediction/BHTO_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/prediction/output_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/prediction/BHTO_b_a_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/prediction/output_grad/ReluGrad"
  input: "^optimizer/gradients/prediction/BHTO_b_a_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/prediction/output_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/prediction/WHTO_w_m_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/prediction/BHTO_b_a_grad/tuple/control_dependency"
  input: "weights_and_biases/outwards_propagating_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/prediction/WHTO_w_m_grad/MatMul_1"
  op: "MatMul"
  input: "forward_roll/strided_slice"
  input: "optimizer/gradients/prediction/BHTO_b_a_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/prediction/WHTO_w_m_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/prediction/WHTO_w_m_grad/MatMul"
  input: "^optimizer/gradients/prediction/WHTO_w_m_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/prediction/WHTO_w_m_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/prediction/WHTO_w_m_grad/MatMul"
  input: "^optimizer/gradients/prediction/WHTO_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/prediction/WHTO_w_m_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/prediction/WHTO_w_m_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/prediction/WHTO_w_m_grad/MatMul_1"
  input: "^optimizer/gradients/prediction/WHTO_w_m_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/prediction/WHTO_w_m_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\021\000\000\000\001\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "optimizer/gradients/forward_roll/strided_slice_grad/Shape"
  input: "forward_roll/strided_slice/stack"
  input: "forward_roll/strided_slice/stack_1"
  input: "forward_roll/strided_slice/stack_2"
  input: "optimizer/gradients/prediction/WHTO_w_m_grad/tuple/control_dependency"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "forward_roll/scan/TensorArray_1"
  input: "forward_roll/scan/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "optimizer/gradients"
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "forward_roll/scan/while/Exit_3"
  input: "^optimizer/gradients/forward_roll/scan/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/TensorArray_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "optimizer/gradients/forward_roll/scan/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "forward_roll/scan/TensorArrayStack/range"
  input: "optimizer/gradients/forward_roll/strided_slice_grad/StridedSliceGrad"
  input: "optimizer/gradients/forward_roll/scan/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "optimizer/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/Exit_3_grad/b_exit"
  input: "optimizer/gradients/forward_roll/scan/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/Exit_2_grad/b_exit"
  input: "optimizer/gradients/forward_roll/scan/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/Switch_3_grad/b_switch"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/Merge_3_grad/Switch"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/Switch"
  input: "^optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/Switch:1"
  input: "^optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/Merge_2_grad/Switch"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/Switch"
  input: "^optimizer/gradients/forward_roll/scan/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/Switch:1"
  input: "^optimizer/gradients/forward_roll/scan/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_end/suggestion_adding"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "optimizer/gradients"
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "forward_roll/scan/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_end/suggestion_adding"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_end/suggestion_adding"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Identity_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Identity_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "forward_roll/scan/while/Identity_1"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPopV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPopV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/StackPopV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPopV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPopV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/StackPopV2"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPopV2"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_3_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/AddN"
  op: "AddN"
  input: "optimizer/gradients/forward_roll/scan/while/Merge_2_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/AddN"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/AddN"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/AddN"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Identity_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/Identity_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/Enter"
  input: "forward_roll/scan/while/Identity_2"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_gate/sigmoid_IF"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_gate/sigmoid_IF"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/Enter"
  input: "forward_roll/scan/while/To_suggestion_gate/sigmoid_IF"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_gate/making_input_gate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_gate/making_input_gate"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/Enter"
  input: "forward_roll/scan/while/To_suggestion_gate/making_input_gate"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/suggestion_adding_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/Enter"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/forward_roll/scan/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion_grad/TanhGrad"
  op: "TanhGrad"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1/StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/making_input_gate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/control_dependency_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/making_input_gate_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/making_input_gate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/making_input_gate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/making_input_gate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/to_suggestion_node_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion_grad/TanhGrad"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion_grad/TanhGrad"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion_grad/TanhGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion_grad/TanhGrad"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/tanh_suggestion_grad/TanhGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Shape"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Shape_1"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Shape"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/making_input_gate_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Sum"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Mul_1/Const"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/making_input_gate_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Mul_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Sum_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul/Enter"
  op: "Enter"
  input: "weights_and_biases/Suggestion_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1"
  op: "MatMul"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/Enter"
  input: "forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc_1"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc_2"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc_2"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/Add"
  op: "Add"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/Switch:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc_3"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/AddN_1"
  op: "AddN"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_IF_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1/StackPopV2"
  input: "optimizer/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Const"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Rank"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/mod"
  op: "FloorMod"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Const"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Shape"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\025\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Shape_1"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/mod"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Shape"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice"
  op: "Slice"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/ConcatOffset"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice_1"
  op: "Slice"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/ConcatOffset:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/Slice_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 45
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc_1"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc_2"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc_2"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/Add"
  op: "Add"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/Switch:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc_3"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_IF_grad/SigmoidGrad"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_IF_grad/SigmoidGrad"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_IF_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_IF_grad/SigmoidGrad"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_IF_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/making_suggestion_rail_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/Enter"
  input: "forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul/Enter"
  op: "Enter"
  input: "weights_and_biases/Input_Forget_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1"
  op: "MatMul"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/Enter"
  input: "forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat"
  input: "^optimizer/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPopV2/Enter"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc_1"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc_2"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc_2"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/Add"
  op: "Add"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/Switch:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc_3"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/Mul_1/StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 45
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc_1"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc_2"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc_2"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/Add"
  op: "Add"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/Switch:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc_3"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate_grad/SigmoidGrad"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate_grad/SigmoidGrad"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate_grad/SigmoidGrad"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_suggestion_gate/sigmoid_insertion_gate_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul/Enter"
  op: "Enter"
  input: "weights_and_biases/insertion_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul_1"
  op: "MatMul"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul_1/StackPopV2"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc_1"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc_2"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc_2"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/Add"
  op: "Add"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/Switch:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc_3"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/AddN_2"
  op: "AddN"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/tuple/control_dependency"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Const"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Rank"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/mod"
  op: "FloorMod"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Const"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Shape"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\025\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Shape_1"
  op: "Const"
  input: "^optimizer/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/mod"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Shape"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice"
  op: "Slice"
  input: "optimizer/gradients/AddN_2"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/ConcatOffset"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice_1"
  op: "Slice"
  input: "optimizer/gradients/AddN_2"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/ConcatOffset:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice_1"
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice_1"
  input: "^optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 45
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc_1"
  op: "Enter"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "optimizer/gradients/forward_roll/scan/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc_2"
  op: "Merge"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/Switch"
  op: "Switch"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc_2"
  input: "optimizer/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/Add"
  op: "Add"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/Switch:1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc_3"
  op: "Exit"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/AddN_3"
  op: "AddN"
  input: "optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/suggestion_rail_making_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/process_rail_concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/forward_roll/scan/while/To_end/forget_gating_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/forward_roll/scan/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "optimizer/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "optimizer/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/beta1_power/Assign"
  op: "Assign"
  input: "optimizer/beta1_power"
  input: "optimizer/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/beta1_power/read"
  op: "Identity"
  input: "optimizer/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
}
node {
  name: "optimizer/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "optimizer/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "optimizer/beta2_power/Assign"
  op: "Assign"
  input: "optimizer/beta2_power"
  input: "optimizer/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/beta2_power/read"
  op: "Identity"
  input: "optimizer/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/insertion_weight/Adam/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/insertion_weight/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/insertion_weight/Adam"
  input: "weights_and_biases/insertion_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/insertion_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/insertion_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/insertion_weight/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/insertion_weight/Adam_1"
  input: "weights_and_biases/insertion_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/insertion_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/insertion_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/Input_Forget_weight/Adam/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/Input_Forget_weight/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/Input_Forget_weight/Adam"
  input: "weights_and_biases/Input_Forget_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/Input_Forget_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/Input_Forget_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/Input_Forget_weight/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/Input_Forget_weight/Adam_1"
  input: "weights_and_biases/Input_Forget_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/Input_Forget_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/Input_Forget_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/Suggestion_weight/Adam/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/Suggestion_weight/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/Suggestion_weight/Adam"
  input: "weights_and_biases/Suggestion_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/Suggestion_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "-\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "weights_and_biases/Suggestion_weight/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "weights_and_biases/Suggestion_weight/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 45
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/Suggestion_weight/Adam_1"
  input: "weights_and_biases/Suggestion_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/Suggestion_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/Suggestion_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "weights_and_biases/outwards_propagating_weight/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_weight/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/insertion_bias/Adam"
  input: "weights_and_biases/insertion_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/insertion_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/insertion_bias/Adam_1"
  input: "weights_and_biases/insertion_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/insertion_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/insertion_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/input_forget_bias/Adam"
  input: "weights_and_biases/input_forget_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/input_forget_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/input_forget_bias/Adam_1"
  input: "weights_and_biases/input_forget_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/input_forget_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/input_forget_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/suggestion_bias/Adam"
  input: "weights_and_biases/suggestion_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/suggestion_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/suggestion_bias/Adam_1"
  input: "weights_and_biases/suggestion_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/suggestion_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/suggestion_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "weights_and_biases/outwards_propagating_bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1/Assign"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "weights_and_biases/outwards_propagating_bias/Adam_1/read"
  op: "Identity"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
}
node {
  name: "optimizer/Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0032208182383328676
      }
    }
  }
}
node {
  name: "optimizer/Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "optimizer/Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "optimizer/Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/insertion_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/insertion_weight"
  input: "weights_and_biases/insertion_weight/Adam"
  input: "weights_and_biases/insertion_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_insert/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/Input_Forget_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/Input_Forget_weight"
  input: "weights_and_biases/Input_Forget_weight/Adam"
  input: "weights_and_biases/Input_Forget_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/matmul_IF/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/Suggestion_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/Suggestion_weight"
  input: "weights_and_biases/Suggestion_weight/Adam"
  input: "weights_and_biases/Suggestion_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/matmul_suggestion/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/prediction/WHTO_w_m_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/insertion_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/insertion_bias"
  input: "weights_and_biases/insertion_bias/Adam"
  input: "weights_and_biases/insertion_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_insert/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/input_forget_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/input_forget_bias"
  input: "weights_and_biases/input_forget_bias/Adam"
  input: "weights_and_biases/input_forget_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/forward_roll/scan/while/To_insertion_and_IF_gates/bias_add_IF/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/suggestion_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/suggestion_bias"
  input: "weights_and_biases/suggestion_bias/Adam"
  input: "weights_and_biases/suggestion_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/forward_roll/scan/while/To_suggestion_rail_and_node/bias_add_suggestion/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  op: "ApplyAdam"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "optimizer/beta1_power/read"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/learning_rate"
  input: "optimizer/Adam/beta1"
  input: "optimizer/Adam/beta2"
  input: "optimizer/Adam/epsilon"
  input: "optimizer/gradients/prediction/BHTO_b_a_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/Adam/mul"
  op: "Mul"
  input: "optimizer/beta1_power/read"
  input: "optimizer/Adam/beta1"
  input: "^optimizer/Adam/update_weights_and_biases/Input_Forget_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/Suggestion_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/input_forget_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/insertion_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/insertion_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/suggestion_bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
}
node {
  name: "optimizer/Adam/Assign"
  op: "Assign"
  input: "optimizer/beta1_power"
  input: "optimizer/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/Adam/mul_1"
  op: "Mul"
  input: "optimizer/beta2_power/read"
  input: "optimizer/Adam/beta2"
  input: "^optimizer/Adam/update_weights_and_biases/Input_Forget_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/Suggestion_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/input_forget_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/insertion_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/insertion_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/suggestion_bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
}
node {
  name: "optimizer/Adam/Assign_1"
  op: "Assign"
  input: "optimizer/beta2_power"
  input: "optimizer/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/Adam"
  op: "NoOp"
  input: "^optimizer/Adam/Assign"
  input: "^optimizer/Adam/Assign_1"
  input: "^optimizer/Adam/update_weights_and_biases/Input_Forget_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/Suggestion_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/input_forget_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/insertion_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/insertion_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_bias/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/outwards_propagating_weight/ApplyAdam"
  input: "^optimizer/Adam/update_weights_and_biases/suggestion_bias/ApplyAdam"
}
node {
  name: "summaries_and_saver/W_Insertion/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Insertion"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Insertion"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Insertion/tag"
  input: "weights_and_biases/insertion_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/W_Input_Forget/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Input_Forget"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Input_Forget"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Input_Forget/tag"
  input: "weights_and_biases/Input_Forget_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/W_Suggestion/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Suggestion"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Suggestion"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Suggestion/tag"
  input: "weights_and_biases/Suggestion_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/W_Hidden_to_Out/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/W_Hidden_to_Out"
      }
    }
  }
}
node {
  name: "summaries_and_saver/W_Hidden_to_Out"
  op: "HistogramSummary"
  input: "summaries_and_saver/W_Hidden_to_Out/tag"
  input: "weights_and_biases/outwards_propagating_weight/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Insertion/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Insertion"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Insertion"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Insertion/tag"
  input: "weights_and_biases/insertion_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Input_Forget/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Input_Forget"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Input_Forget"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Input_Forget/tag"
  input: "weights_and_biases/input_forget_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Suggestion/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Suggestion"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Suggestion"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Suggestion/tag"
  input: "weights_and_biases/suggestion_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/B_Hidden_to_Out/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/B_Hidden_to_Out"
      }
    }
  }
}
node {
  name: "summaries_and_saver/B_Hidden_to_Out"
  op: "HistogramSummary"
  input: "summaries_and_saver/B_Hidden_to_Out/tag"
  input: "weights_and_biases/outwards_propagating_bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "summaries_and_saver/Loss"
      }
    }
  }
}
node {
  name: "summaries_and_saver/Loss"
  op: "ScalarSummary"
  input: "summaries_and_saver/Loss/tags"
  input: "loss/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "summaries_and_saver/Merge/MergeSummary"
  op: "MergeSummary"
  input: "summaries_and_saver/W_Insertion"
  input: "summaries_and_saver/W_Input_Forget"
  input: "summaries_and_saver/W_Suggestion"
  input: "summaries_and_saver/W_Hidden_to_Out"
  input: "summaries_and_saver/B_Insertion"
  input: "summaries_and_saver/B_Input_Forget"
  input: "summaries_and_saver/B_Suggestion"
  input: "summaries_and_saver/B_Hidden_to_Out"
  input: "summaries_and_saver/Loss"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
}
node {
  name: "summaries_and_saver/save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "optimizer/beta1_power"
        string_val: "optimizer/beta2_power"
        string_val: "weights_and_biases/Input_Forget_weight"
        string_val: "weights_and_biases/Input_Forget_weight/Adam"
        string_val: "weights_and_biases/Input_Forget_weight/Adam_1"
        string_val: "weights_and_biases/Suggestion_weight"
        string_val: "weights_and_biases/Suggestion_weight/Adam"
        string_val: "weights_and_biases/Suggestion_weight/Adam_1"
        string_val: "weights_and_biases/input_forget_bias"
        string_val: "weights_and_biases/input_forget_bias/Adam"
        string_val: "weights_and_biases/input_forget_bias/Adam_1"
        string_val: "weights_and_biases/insertion_bias"
        string_val: "weights_and_biases/insertion_bias/Adam"
        string_val: "weights_and_biases/insertion_bias/Adam_1"
        string_val: "weights_and_biases/insertion_weight"
        string_val: "weights_and_biases/insertion_weight/Adam"
        string_val: "weights_and_biases/insertion_weight/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_bias"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_weight"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam_1"
        string_val: "weights_and_biases/suggestion_bias"
        string_val: "weights_and_biases/suggestion_bias/Adam"
        string_val: "weights_and_biases/suggestion_bias/Adam_1"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/SaveV2"
  op: "SaveV2"
  input: "summaries_and_saver/save/Const"
  input: "summaries_and_saver/save/SaveV2/tensor_names"
  input: "summaries_and_saver/save/SaveV2/shape_and_slices"
  input: "optimizer/beta1_power"
  input: "optimizer/beta2_power"
  input: "weights_and_biases/Input_Forget_weight"
  input: "weights_and_biases/Input_Forget_weight/Adam"
  input: "weights_and_biases/Input_Forget_weight/Adam_1"
  input: "weights_and_biases/Suggestion_weight"
  input: "weights_and_biases/Suggestion_weight/Adam"
  input: "weights_and_biases/Suggestion_weight/Adam_1"
  input: "weights_and_biases/input_forget_bias"
  input: "weights_and_biases/input_forget_bias/Adam"
  input: "weights_and_biases/input_forget_bias/Adam_1"
  input: "weights_and_biases/insertion_bias"
  input: "weights_and_biases/insertion_bias/Adam"
  input: "weights_and_biases/insertion_bias/Adam_1"
  input: "weights_and_biases/insertion_weight"
  input: "weights_and_biases/insertion_weight/Adam"
  input: "weights_and_biases/insertion_weight/Adam_1"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  input: "weights_and_biases/suggestion_bias"
  input: "weights_and_biases/suggestion_bias/Adam"
  input: "weights_and_biases/suggestion_bias/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/control_dependency"
  op: "Identity"
  input: "summaries_and_saver/save/Const"
  input: "^summaries_and_saver/save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@summaries_and_saver/save/Const"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "optimizer/beta1_power"
        string_val: "optimizer/beta2_power"
        string_val: "weights_and_biases/Input_Forget_weight"
        string_val: "weights_and_biases/Input_Forget_weight/Adam"
        string_val: "weights_and_biases/Input_Forget_weight/Adam_1"
        string_val: "weights_and_biases/Suggestion_weight"
        string_val: "weights_and_biases/Suggestion_weight/Adam"
        string_val: "weights_and_biases/Suggestion_weight/Adam_1"
        string_val: "weights_and_biases/input_forget_bias"
        string_val: "weights_and_biases/input_forget_bias/Adam"
        string_val: "weights_and_biases/input_forget_bias/Adam_1"
        string_val: "weights_and_biases/insertion_bias"
        string_val: "weights_and_biases/insertion_bias/Adam"
        string_val: "weights_and_biases/insertion_bias/Adam_1"
        string_val: "weights_and_biases/insertion_weight"
        string_val: "weights_and_biases/insertion_weight/Adam"
        string_val: "weights_and_biases/insertion_weight/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_bias"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam"
        string_val: "weights_and_biases/outwards_propagating_bias/Adam_1"
        string_val: "weights_and_biases/outwards_propagating_weight"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam"
        string_val: "weights_and_biases/outwards_propagating_weight/Adam_1"
        string_val: "weights_and_biases/suggestion_bias"
        string_val: "weights_and_biases/suggestion_bias/Adam"
        string_val: "weights_and_biases/suggestion_bias/Adam_1"
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/RestoreV2"
  op: "RestoreV2"
  input: "summaries_and_saver/save/Const"
  input: "summaries_and_saver/save/RestoreV2/tensor_names"
  input: "summaries_and_saver/save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign"
  op: "Assign"
  input: "optimizer/beta1_power"
  input: "summaries_and_saver/save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_1"
  op: "Assign"
  input: "optimizer/beta2_power"
  input: "summaries_and_saver/save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_2"
  op: "Assign"
  input: "weights_and_biases/Input_Forget_weight"
  input: "summaries_and_saver/save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_3"
  op: "Assign"
  input: "weights_and_biases/Input_Forget_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_4"
  op: "Assign"
  input: "weights_and_biases/Input_Forget_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Input_Forget_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_5"
  op: "Assign"
  input: "weights_and_biases/Suggestion_weight"
  input: "summaries_and_saver/save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_6"
  op: "Assign"
  input: "weights_and_biases/Suggestion_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_7"
  op: "Assign"
  input: "weights_and_biases/Suggestion_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/Suggestion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_8"
  op: "Assign"
  input: "weights_and_biases/input_forget_bias"
  input: "summaries_and_saver/save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_9"
  op: "Assign"
  input: "weights_and_biases/input_forget_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_10"
  op: "Assign"
  input: "weights_and_biases/input_forget_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/input_forget_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_11"
  op: "Assign"
  input: "weights_and_biases/insertion_bias"
  input: "summaries_and_saver/save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_12"
  op: "Assign"
  input: "weights_and_biases/insertion_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_13"
  op: "Assign"
  input: "weights_and_biases/insertion_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_14"
  op: "Assign"
  input: "weights_and_biases/insertion_weight"
  input: "summaries_and_saver/save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_15"
  op: "Assign"
  input: "weights_and_biases/insertion_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_16"
  op: "Assign"
  input: "weights_and_biases/insertion_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/insertion_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_17"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias"
  input: "summaries_and_saver/save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_18"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_19"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_20"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight"
  input: "summaries_and_saver/save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_21"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam"
  input: "summaries_and_saver/save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_22"
  op: "Assign"
  input: "weights_and_biases/outwards_propagating_weight/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/outwards_propagating_weight"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_23"
  op: "Assign"
  input: "weights_and_biases/suggestion_bias"
  input: "summaries_and_saver/save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_24"
  op: "Assign"
  input: "weights_and_biases/suggestion_bias/Adam"
  input: "summaries_and_saver/save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/Assign_25"
  op: "Assign"
  input: "weights_and_biases/suggestion_bias/Adam_1"
  input: "summaries_and_saver/save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@weights_and_biases/suggestion_bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "summaries_and_saver/save/restore_all"
  op: "NoOp"
  input: "^summaries_and_saver/save/Assign"
  input: "^summaries_and_saver/save/Assign_1"
  input: "^summaries_and_saver/save/Assign_10"
  input: "^summaries_and_saver/save/Assign_11"
  input: "^summaries_and_saver/save/Assign_12"
  input: "^summaries_and_saver/save/Assign_13"
  input: "^summaries_and_saver/save/Assign_14"
  input: "^summaries_and_saver/save/Assign_15"
  input: "^summaries_and_saver/save/Assign_16"
  input: "^summaries_and_saver/save/Assign_17"
  input: "^summaries_and_saver/save/Assign_18"
  input: "^summaries_and_saver/save/Assign_19"
  input: "^summaries_and_saver/save/Assign_2"
  input: "^summaries_and_saver/save/Assign_20"
  input: "^summaries_and_saver/save/Assign_21"
  input: "^summaries_and_saver/save/Assign_22"
  input: "^summaries_and_saver/save/Assign_23"
  input: "^summaries_and_saver/save/Assign_24"
  input: "^summaries_and_saver/save/Assign_25"
  input: "^summaries_and_saver/save/Assign_3"
  input: "^summaries_and_saver/save/Assign_4"
  input: "^summaries_and_saver/save/Assign_5"
  input: "^summaries_and_saver/save/Assign_6"
  input: "^summaries_and_saver/save/Assign_7"
  input: "^summaries_and_saver/save/Assign_8"
  input: "^summaries_and_saver/save/Assign_9"
}
node {
  name: "init"
  op: "NoOp"
  input: "^optimizer/beta1_power/Assign"
  input: "^optimizer/beta2_power/Assign"
  input: "^weights_and_biases/Input_Forget_weight/Adam/Assign"
  input: "^weights_and_biases/Input_Forget_weight/Adam_1/Assign"
  input: "^weights_and_biases/Input_Forget_weight/Assign"
  input: "^weights_and_biases/Suggestion_weight/Adam/Assign"
  input: "^weights_and_biases/Suggestion_weight/Adam_1/Assign"
  input: "^weights_and_biases/Suggestion_weight/Assign"
  input: "^weights_and_biases/input_forget_bias/Adam/Assign"
  input: "^weights_and_biases/input_forget_bias/Adam_1/Assign"
  input: "^weights_and_biases/input_forget_bias/Assign"
  input: "^weights_and_biases/insertion_bias/Adam/Assign"
  input: "^weights_and_biases/insertion_bias/Adam_1/Assign"
  input: "^weights_and_biases/insertion_bias/Assign"
  input: "^weights_and_biases/insertion_weight/Adam/Assign"
  input: "^weights_and_biases/insertion_weight/Adam_1/Assign"
  input: "^weights_and_biases/insertion_weight/Assign"
  input: "^weights_and_biases/outwards_propagating_bias/Adam/Assign"
  input: "^weights_and_biases/outwards_propagating_bias/Adam_1/Assign"
  input: "^weights_and_biases/outwards_propagating_bias/Assign"
  input: "^weights_and_biases/outwards_propagating_weight/Adam/Assign"
  input: "^weights_and_biases/outwards_propagating_weight/Adam_1/Assign"
  input: "^weights_and_biases/outwards_propagating_weight/Assign"
  input: "^weights_and_biases/suggestion_bias/Adam/Assign"
  input: "^weights_and_biases/suggestion_bias/Adam_1/Assign"
  input: "^weights_and_biases/suggestion_bias/Assign"
}
versions {
  producer: 27
}
